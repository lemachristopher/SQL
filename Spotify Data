# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.


#Next, I explored all the data using the following SQL. 

SELECT * FROM BIT_DB.Spotifydata;


#NEXT, I further explored the data using more complex SQL. 

--longest song (seconds) in data set
SELECT track_name, max(duration_ms/1000)
FROM BIT_DB.Spotifydata;

-- shortest song (seconds) in the data set
SELECT track_name, min(duration_ms/1000)
FROM BIT_DB.Spotifydata;

-- average duration (seconds) of a song in the data set
SELECT avg(duration_ms/1000)
FROM BIT_DB.Spotifydata;

-- 10 most popular songs in the data set
SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

-- 10 least popular songs in the data set
SELECT track_name, popularity, duration_ms/1000 AS durationSeconds
FROM BIT_DB.Spotifydata
ORDER BY popularity asc
LIMIT 10;

-- artist name, track name, popularity, and duration in seconds of all songs, ordered by popularity (from most popular to least).
SELECT artist_name, track_name, popularity, (duration_ms/1000) AS durationSeconds
FROM BIT_DB.Spotifydata
ORDER BY popularity desc;
